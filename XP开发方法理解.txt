XP：极限编程（ExtremeProgrammin）
是一种软件工程方法学，敏捷开发方法的一种，不同于上周所了解到Scrum开发方法，XP是一个轻量级的、灵巧的软件开发方法；同时也是一个非常严谨和周密的方法

“极限”的原因：
对比传统的项目开发方式，XP强调把它列出的每个方法和思想做到极限、做到最好；其它所不提倡的，XP则一概忽略（如开发前期的整体设计等）。一个严格实施XP的项目，其开发过程应该是平稳的、高效的和快速的，不拖延项目进度。

-------------------------------------------------------------------------
XP的价值标准（核心价值观）：
沟通（Communication）、简单（Simplicity）、反馈（Feedback）、勇气（Courage）、尊重（respect）

XP用“沟通、简单、反馈、勇气和尊重”来减轻开发压力和包袱；无论是术语命名、专著叙述内容和方式、过程要求，都可以从中感受到轻松愉快和主动奋发的态度和气氛。

沟通：
目标是向所有开发人员提供一个对于系统的共享的视角，而这一视角又是与系统的最终用户的视角相吻合的。为了达到这一目标，极限编程支持设计、抽象、还有用户-程序员间交流的简单化，鼓励经常性的口头交流与回馈

简单：
鼓励从最简单的解决方式入手再通过不断重构达到更好的结果。与传统系统开发方式的不同之处在于，它只关注于对当前的需求来进行设计、编码，而不去理会未来会出现的需求。这样的考虑有缺陷，有时候在修改现有的系统以满足未来的需求时不得不付出更多的努力。然而“不对将来可能的需求上投入精力”所得到的好处可以弥补这一点，因为将来的需求在还没提出之前是很可能发生变化的。为了将来不确定的需求进行设计以及编码意味着在一些可能并不需要的方面浪费资源。
而与之前提到的“沟通”这一价值相关联来看，设计与代码上的简化可以提高交流的质量。一个由简单的编码实现的简单的设计可以更加容易得被小组中的每个程序员所理解。

反馈：
来自系统的反馈：通过编写单元测试，程序员能够很直观的得到经过修改后系统的状态。
来自客户的反馈：功能性测试是由客户还有测试人员来编写的。他们能由此得知当前系统的状态。这样的评审一般计划2、3星期进行一次，这样客户可以非常容易的了解、掌控开发的进度。
来自小组的反馈：当客户带着新需求来参加项目计划会议时，小组可以直接对于实现新需求所需要的时间进行评估然后反馈给客户。

勇气：
极限编程理论中的“系统开发中的勇气”最好用一组实践来诠释。其中之一就是“只为目前的需求设计以及编码，别为不可预期的未来做太多考虑”这条戒律。这是努力避免陷入设计的泥潭、而在其他问题上花费了太多不必要的精力。勇气使得开发人员在需要重构他们的代码时能感到舒适。这意味着重新审查现有系统并完善它会使得以后出现的变化需求更容易被实现。另一个勇气的例子是了解什么时候应该完全丢弃现有的代码。每个程序员都有这样的经历：他们花了一整天的时间纠缠于自己设计和代码中的一个复杂的难题却无所得，而第二天回来以一个全新而清醒的角度来考虑，在半小时内就轻松解决了问题。

尊重：
尊重的价值体现在很多方面。在XP中，团队成员间的互相尊重体现在每个人保证提交的任何改变不会导致编译无法通过、或者导致现有的测试案例失败、或者以其他方式导致工作延期。团队成员对于他们工作的尊重体现在他们总是坚持追求高质量，坚持通过重构的手段来为手头的工作找到最好的解决设计方案。


-------------------------------------------------------------------------
XP的核心实践：
团队协作：通过客户、开发团队、项目经理三方共同参加的会议来确定开发计划。
规划策略： 计划是持续的、循序渐进的。每2周，开发人员就为下2周估算候选特性的成本，而客户则根据成本和商务价值来选择要实现的特性。
结对编程：系统的每一行代码都是两个人用一个键盘完成的。
测试驱动开发：先写测试，后写代码。
重构：不断优化系统设计，使之保持简单。
简单设计：为明确的功能进行最优的设计，不考虑未来可能需要的功能。
代码集体所有权：开发队伍中任何人可以修改任何其他人的代码，代码不属于某个个人。
持续集成：至少每天将整个系统集成一次，保持一个能运转的系统。
客户测试：客户自己也是软件开发队伍的重要一份子。
小版本发布：尽快发布，尽早发布。
每周40小时工作制：保证休息，保持体力。
编码标准：必须有统一的编码规范，确保代码的可读性。
系统隐喻：将整个系统联系在一起的全局视图；它是系统的未来影像，是它使得所有单独模块的位置和外观变得明显直观。如果模块的外观与整个隐喻不符，那么就可以知道该模块是错误的。

