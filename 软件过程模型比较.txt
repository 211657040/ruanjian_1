传统开发模型：

瀑布模型：开发过程是通过设计一系列阶段顺序展开的，从系统需求分析开始直到产品发布和维护，每个阶段都会产生循环反馈，如果发现问题可以返回上一个阶段，从一个阶段“流动”到下一个阶段。结构清晰且风险可控。
但缺点在于交付周期长，需要等待完全开发，并且需要有明确的需求才能使用，并且到了后期修改成本高，需要进行回溯修改。
适合需求稳定且相对较小的项目
相比于其他两个传统开发模型更适合小型的项目

螺旋模型：兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控，最大的特点在于引入了其他模型不具备的风险分析，灵活适应需求并且有着渐进式交付。
缺点在于多轮原型开发和风险评估需要消耗的资源大，依赖团队的风险分析能力和管理复杂。
适合用作复杂的大项目，不太适合个人博客的简单开发

迭代增量模型：将系统拆解为多个功能模块（增量），分批次开发并集成。
有快速交付价值：用户可以快速优先地使用核心功能，然后补全剩余功能。
并且每次增量可独立测试，避免大爆炸式的集成问题，灵活性较高。
缺点在于需要预先规划好模块化接口，否则后期增量难以兼容，并且可能会带来冗余的重复性工作造成人力物力浪费。
适合需要做较长时间的大型项目，不适合本次个人博客软件

敏捷开发模型：轻文档, 客户参与, 拥抱变化,人与人的沟通
响应变化效率高：通过每日站会和迭代评审快速调整需求优先级
客户能够深度参与，便于确保产品价值导向，这是传统开发模型所不具备的
侧重可运行软件而非详尽文档，适合需求模糊或快速变化的领域
缺点在于需要高度自组织的团队，并且规模化和合规性具有一定挑战
适合需求多或容易变化的互联网产品，如Web应用等

因此此次个人博客软件开发倾向于采用敏捷开发模型